threadSlice

import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface ThreadState {
	threadId: string | null;
	threadName: string | null;
	threadImg: string | null;
}

const initialState: ThreadState = {
	threadId: null,
	threadName: null,
	threadImg: null,
};

export const threadSlice = createSlice({
	name: "thread",
	initialState,
	reducers: {
		setThread: (state, action: PayloadAction<ThreadState>) => {
			state.threadId = action.payload.threadId;
			state.threadName = action.payload.threadName;
			state.threadImg = action.payload.threadImg;
		},
	},
});

export const { setThread } = threadSlice.actions;

export const selectThreadId = (state: { thread: ThreadState }) =>
	state.thread.threadId;
export const selectThreadName = (state: { thread: ThreadState }) =>
	state.thread.threadName;
export const selectThreadImg = (state: { thread: ThreadState }) =>
	state.thread.threadImg;

export default threadSlice.reducer;


end


userSlice 



import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface UserState {
	user: {
		uid: string;
		photo: string | null;
		email: string | null;
		displayName: string | null;
	} | null;
}

const initialState: UserState = {
	user: null,
};

export const userSlice = createSlice({
	name: "user",
	initialState,
	reducers: {
		login: (
			state,
			action: PayloadAction<{
				uid: string;
				photo: string | null;
				email: string | null;
				displayName: string | null;
			}>,
		) => {
			state.user = action.payload;
		},
		logout: (state) => {
			state.user = null;
		},
	},
});

export const { login, logout } = userSlice.actions;

export const selectUser = (state: { user: UserState }) => state.user.user;

export default userSlice.reducer;
